import{d as e,b as s,o as t,l as n,w as o,h as i}from "./vendor.3140252b.js";const r=e({props:{client_name:""},name:"WebSocket",setup: e=>({client_name:e.client_name}),data(){return{louiseBootTime:"未知",isConn:!1,wsIsRun:!1,webSocket:null,ws:"ws://127.0.0.1:8099/saito_ws/"+this.client_name,wsTimer:null}},async mounted(){this.wsIsRun=!0,this.wsInit()},methods:{sendDataToServer(){if(1!==this.webSocket.readyState)throw Error("服务未连接");this.webSocket.send("来自前端的数据")},wsInit(){this.wsIsRun&&(this.wsDestroy(),this.webSocket=new WebSocket(this.ws),this.webSocket.addEventListener("open",this.wsOpenHanler),this.webSocket.addEventListener("message",this.wsMessageHanler),this.webSocket.addEventListener("error",this.wsErrorHanler),this.webSocket.addEventListener("close",this.wsCloseHanler),clearInterval(this.wsTimer),this.wsTimer=setInterval((()=>{1===this.webSocket.readyState?(this.isConn=!0,clearInterval(this.wsTimer)):(this.isConn=!1,console.log("ws建立连接失败"),this.wsInit())}),3e3))},wsOpenHanler(e){this.isConn=!0,console.log("ws建立连接成功")},wsMessageHanler(e){const s=JSON.parse(e.data);this.louiseBootTime=s.bootTime,console.log(this.louiseBootTime)},wsErrorHanler(e){this.isConn=!1,console.log(e,"通信发生错误"),this.wsInit()},wsCloseHanler(e){this.isConn=!1,console.log(e,"ws关闭"),this.wsInit()},wsDestroy(){null!==this.webSocket&&(this.webSocket.removeEventListener("open",this.wsOpenHanler),this.webSocket.removeEventListener("message",this.wsMessageHanler),this.webSocket.removeEventListener("error",this.wsErrorHanler),this.webSocket.removeEventListener("close",this.wsCloseHanler),this.webSocket.close(),this.webSocket=null,clearInterval(this.wsTimer))}}}),a=i(" 确认发送 ");r.render=function(e, i, r, l, w, h){const c=s("n-button");return t(),n(c,{onClick:e.sendDataToServer},{default:o((()=>[a])),_:1},8,["onClick"])};export{r as _};
